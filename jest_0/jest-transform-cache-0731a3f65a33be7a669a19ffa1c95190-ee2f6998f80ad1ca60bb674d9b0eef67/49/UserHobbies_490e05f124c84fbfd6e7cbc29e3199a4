3024fd85536ffe6331c59c497da27948
"use strict";

var _interopRequireDefault = require("/Users/selvam_m1/Challenges/mercavus-task-challenge/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/Users/selvam_m1/Challenges/mercavus-task-challenge/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("/Users/selvam_m1/Challenges/mercavus-task-challenge/node_modules/@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactConfirmAlert = require("react-confirm-alert");

require("react-confirm-alert/src/react-confirm-alert.css");

var _Table = _interopRequireDefault(require("../Table/Table"));

var _HobbyTable = _interopRequireDefault(require("../HobbyTable/HobbyTable"));

var _UserForm = _interopRequireDefault(require("../UserForm/UserForm"));

var _Utils = require("../../Utils");

require("./UserHobbies.css");

var _interfaces = require("../../interfaces");

var _jsxFileName = "/Users/selvam_m1/Challenges/mercavus-task-challenge/src/Components/UserHobbies/UserHobbies.tsx";

const UserHobbies = () => {
  const _useState = (0, _react.useState)(),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        data = _useState2[0],
        setData = _useState2[1];

  const _useState3 = (0, _react.useState)(false),
        _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
        isFullView = _useState4[0],
        setFullView = _useState4[1];

  const _useState5 = (0, _react.useState)(),
        _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
        currentUserHobby = _useState6[0],
        setCurrentUserData = _useState6[1];

  (0, _react.useEffect)(() => {
    (0, _Utils.getData)(`${_Utils.API_URL}/userHobbies`).then(respData => {
      console.log("Resp", respData);
      setData(respData);
    });
  }, []);

  const handleConfirmBox = (currentUserHobby, index) => {
    (0, _reactConfirmAlert.confirmAlert)({
      title: "Confirm to Delete",
      message: "Are you sure to do this.",
      buttons: [{
        label: "Delete",
        onClick: () => handleDelete(currentUserHobby, index)
      }, {
        label: "Don't delete",
        onClick: () => {}
      }]
    });
  };

  const handleDelete = (currentUserHobby, deleteIndex) => {
    if (currentUserHobby) {
      console.log(currentUserHobby);
      setFullView(true);
      const updtedHobbies = currentUserHobby.hobbies.filter((hobby, index) => index !== deleteIndex);
      currentUserHobby.hobbies = updtedHobbies;
      (0, _Utils.postData)(`${_Utils.API_URL}/userHobbies/${currentUserHobby.id}`, currentUserHobby, _interfaces.PostType.PUT).then(respData => {
        if (respData) (0, _Utils.getData)(`${_Utils.API_URL}/userHobbies`).then(respData => {
          console.log("Resp", respData);
          setData(respData);
        });
      });
    }
  };

  const handeUserAdd = (e, newUserData) => {
    e.preventDefault();

    if (newUserData && data) {
      console.log("User To Be add", newUserData);
      const newUserObj = {
        id: Number(data.length) + 1,
        name: newUserData,
        hobbies: []
      };
      (0, _Utils.postData)(`${_Utils.API_URL}/userHobbies`, newUserObj, _interfaces.PostType.POST).then(respData => {
        if (respData) (0, _Utils.getData)(`${_Utils.API_URL}/userHobbies`).then(respData => {
          console.log("Resp", respData);
          setData(respData);
        });
      });
    }
  };

  const handleHobbbyAdd = (e, newUserHobbyData) => {
    e.preventDefault();

    if (newUserHobbyData) {
      console.log(newUserHobbyData);
      setFullView(true);
      (0, _Utils.postData)(`${_Utils.API_URL}/userHobbies/${newUserHobbyData.id}`, newUserHobbyData, _interfaces.PostType.PUT).then(respData => {
        if (respData) (0, _Utils.getData)(`${_Utils.API_URL}/userHobbies`).then(respData => {
          console.log("Resp", respData);
          setData(respData);
        });
      });
    }
  };

  const getHobbyDetails = currentUserHobby => {
    if (!currentUserHobby) return _react.default.createElement(_react.default.Fragment, null);
    return _react.default.createElement(_HobbyTable.default, {
      userName: currentUserHobby.name,
      userHobbyData: currentUserHobby,
      handleConfirmBox: handleConfirmBox,
      handleHobbbyAdd: handleHobbbyAdd,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      },
      __self: void 0
    });
  };

  return _react.default.createElement("div", {
    className: "ReactTable",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121
    },
    __self: void 0
  }, _react.default.createElement("div", {
    className: "userHobbyDetails",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122
    },
    __self: void 0
  }, _react.default.createElement("div", {
    className: "userDetails",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123
    },
    __self: void 0
  }, _react.default.createElement("h1", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 124
    },
    __self: void 0
  }, "User Lists"), _react.default.createElement("div", {
    className: "userAddForm",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 125
    },
    __self: void 0
  }, _react.default.createElement(_UserForm.default, {
    userAddFunc: handeUserAdd,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 126
    },
    __self: void 0
  })), _react.default.createElement("div", {
    className: "userLists",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128
    },
    __self: void 0
  }, data && data.map((userData, index) => _react.default.createElement(_Table.default, {
    userData: userData,
    key: index,
    onUserClick: setCurrentUserData,
    enableFullView: setFullView,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131
    },
    __self: void 0
  })))), isFullView && _react.default.createElement("div", {
    className: "userHobbyDetails",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141
    },
    __self: void 0
  }, getHobbyDetails(currentUserHobby))));
};

var _default = UserHobbies;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,